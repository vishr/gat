#!/usr/bin/env node

var program = require("commander");
var path = require("path");
var fs = require("fs-extra");
var spawn = require("child_process").spawn;
var net = require("net");
var winston = require("winston");
var cfg = require("../gat").config;
var pkg = require("../package.json");

// Logging
var logger = new winston.Logger({
  transports: [
  new winston.transports.Console({
    colorize: true,
    prettyPrint: true
  })]
});

function start() {
  logger.info("starting gat on port " + cfg.port.toString().grey);
  var client = net.connect({
    port: cfg.port
  });

  // Check if already running
  client.on("connect", function() {
    logger.error("failed starting gat - " + "port already in use".yellow);
    client.end();
    // process.exit(-1);
  });

  client.on("error", function() {
    // Start gat
    var child = spawn(process.execPath, ["server"], {
      detached: true,
      stdio: ["ignore", "ignore", "ignore"]
    });

    try {
      fs.writeFileSync(cfg.pidFile, child.pid + "\n");
      child.unref();
    } catch (e) {
      logger.error("failed starting gat");
      // process.exit(1);
    }
  });
}

function stop() {
  logger.warn("stopping gat");
  try {
    var pid = fs.readFileSync(cfg.pidFile, "utf-8");
    process.kill(pid);
  } catch (e) {
    logger.error("failed stopping gat - " + "not running".yellow);
    // process.exit(1);
  }
}

program.version(pkg.version);

program.command("config").description("Show config").action(function() {
  try {
    var data = fs.readJsonSync(path.join(__dirname, "..", "config.json"));
    logger.info(JSON.stringify(data, null, 2));
  } catch (e) {
    logger.error("\n error reading config");
    // process.exit(1);
  }
});

program.command("start").description("start gat").action(function() {
  start();
});

program.command("stop").description("stop gat").action(function() {
  stop();
});

program.command("restart").description("restart gat").action(function() {
  stop();
  setTimeout(start, 200);
});

program.command("empty").description("empty cache").action(function() {
  logger.warn("emptying cache");
  try {
    fs.removeSync(cfg.root);
  } catch (e) {
    logger.error("error emptying cache");
    // process.exit(1);
  }
});

program.command("*").description("unknown command").action(function() {
  logger.error("unknown command");
  program.help();
});

program.parse(process.argv);

if (!program.args.length) {
  program.help();
}
